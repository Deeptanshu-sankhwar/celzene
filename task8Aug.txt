1. Go to sql/backend, and modularise every single Redis API I have written in the session over the layout of models/routers/controllers. Right now all of the APIs are in server.js, break them down into thir respective folders.

2. Create an autocomplete search service. In sql project we have users, and their activyt logs. Cache the users in Redis such that you can perform autocomplete on users from Redis.
Perform the autocomplete on both Redis & SQL, and then compare the time it takes to perform the action on both Redis and SQL.

3. While inserting a user with the create user API in sql, you need to insert it into Redis as well and make this operation atomic. (Making this operation atomic is optional for now)

4. [Caching the API /getAllUsers] In the sql project, maintain a redis flag for whenever a new user is inserted in the database. Now, this flag is true whenever a new user is inserted to the database and this flag is false whenever we fetch the updated data from redis database. Now, when the flag is true, I want to fetch all the users from SQL and update my Redis DB, but if flag is false, I want to directly fetch all the users from Redis without wasting my time to fetch it from SQL.
isNewUserAdded = true; whever I add a new user, I need to update this flag to true
Now if I call, /getAllUsers, my SQL and Redis are not in sync, first I synchronise Redis with SQL and then return all the users and set back isNewUserAdded = false;
If isNewUserAdded = false, then just return all the users from redis super fast because there is no new user added, so this means that Redis and SQL are both consistent.

Submit a working video (2-5 minutes demo) and github code for your task!